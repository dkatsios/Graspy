package test;

import java.util.Collection;

import org.protege.owl.codegeneration.WrappedIndividual;

import org.semanticweb.owlapi.model.OWLNamedIndividual;
import org.semanticweb.owlapi.model.OWLOntology;

/**
 * 
 * <p>
 * Generated by Protege (http://protege.stanford.edu). <br>
 * Source Class: Single <br>
 * @version generated on Thu Jun 08 01:46:31 EEST 2017 by GEORGE
 */

public interface Single extends Album {

    /* ***************************************************
     * Property http://www.example.com/ontology#hasGenre
     */
     
    /**
     * Gets all property values for the hasGenre property.<p>
     * 
     * @returns a collection of values for the hasGenre property.
     */
    Collection<? extends Genre> getHasGenre();

    /**
     * Checks if the class has a hasGenre property value.<p>
     * 
     * @return true if there is a hasGenre property value.
     */
    boolean hasHasGenre();

    /**
     * Adds a hasGenre property value.<p>
     * 
     * @param newHasGenre the hasGenre property value to be added
     */
    void addHasGenre(Genre newHasGenre);

    /**
     * Removes a hasGenre property value.<p>
     * 
     * @param oldHasGenre the hasGenre property value to be removed.
     */
    void removeHasGenre(Genre oldHasGenre);


    /* ***************************************************
     * Property http://www.example.com/ontology#hasTrack
     */
     
    /**
     * Gets all property values for the hasTrack property.<p>
     * 
     * @returns a collection of values for the hasTrack property.
     */
    Collection<? extends Track> getHasTrack();

    /**
     * Checks if the class has a hasTrack property value.<p>
     * 
     * @return true if there is a hasTrack property value.
     */
    boolean hasHasTrack();

    /**
     * Adds a hasTrack property value.<p>
     * 
     * @param newHasTrack the hasTrack property value to be added
     */
    void addHasTrack(Track newHasTrack);

    /**
     * Removes a hasTrack property value.<p>
     * 
     * @param oldHasTrack the hasTrack property value to be removed.
     */
    void removeHasTrack(Track oldHasTrack);


    /* ***************************************************
     * Property http://www.example.com/ontology#albumArtwork
     */
     
    /**
     * Gets all property values for the albumArtwork property.<p>
     * 
     * @returns a collection of values for the albumArtwork property.
     */
    Collection<? extends String> getAlbumArtwork();

    /**
     * Checks if the class has a albumArtwork property value.<p>
     * 
     * @return true if there is a albumArtwork property value.
     */
    boolean hasAlbumArtwork();

    /**
     * Adds a albumArtwork property value.<p>
     * 
     * @param newAlbumArtwork the albumArtwork property value to be added
     */
    void addAlbumArtwork(String newAlbumArtwork);

    /**
     * Removes a albumArtwork property value.<p>
     * 
     * @param oldAlbumArtwork the albumArtwork property value to be removed.
     */
    void removeAlbumArtwork(String oldAlbumArtwork);



    /* ***************************************************
     * Property http://www.example.com/ontology#albumDuration
     */
     
    /**
     * Gets all property values for the albumDuration property.<p>
     * 
     * @returns a collection of values for the albumDuration property.
     */
    Collection<? extends Float> getAlbumDuration();

    /**
     * Checks if the class has a albumDuration property value.<p>
     * 
     * @return true if there is a albumDuration property value.
     */
    boolean hasAlbumDuration();

    /**
     * Adds a albumDuration property value.<p>
     * 
     * @param newAlbumDuration the albumDuration property value to be added
     */
    void addAlbumDuration(Float newAlbumDuration);

    /**
     * Removes a albumDuration property value.<p>
     * 
     * @param oldAlbumDuration the albumDuration property value to be removed.
     */
    void removeAlbumDuration(Float oldAlbumDuration);



    /* ***************************************************
     * Property http://www.example.com/ontology#albumPrice
     */
     
    /**
     * Gets all property values for the albumPrice property.<p>
     * 
     * @returns a collection of values for the albumPrice property.
     */
    Collection<? extends Float> getAlbumPrice();

    /**
     * Checks if the class has a albumPrice property value.<p>
     * 
     * @return true if there is a albumPrice property value.
     */
    boolean hasAlbumPrice();

    /**
     * Adds a albumPrice property value.<p>
     * 
     * @param newAlbumPrice the albumPrice property value to be added
     */
    void addAlbumPrice(Float newAlbumPrice);

    /**
     * Removes a albumPrice property value.<p>
     * 
     * @param oldAlbumPrice the albumPrice property value to be removed.
     */
    void removeAlbumPrice(Float oldAlbumPrice);



    /* ***************************************************
     * Property http://www.example.com/ontology#albumReleaseDate
     */
     
    /**
     * Gets all property values for the albumReleaseDate property.<p>
     * 
     * @returns a collection of values for the albumReleaseDate property.
     */
    Collection<? extends Object> getAlbumReleaseDate();

    /**
     * Checks if the class has a albumReleaseDate property value.<p>
     * 
     * @return true if there is a albumReleaseDate property value.
     */
    boolean hasAlbumReleaseDate();

    /**
     * Adds a albumReleaseDate property value.<p>
     * 
     * @param newAlbumReleaseDate the albumReleaseDate property value to be added
     */
    void addAlbumReleaseDate(Object newAlbumReleaseDate);

    /**
     * Removes a albumReleaseDate property value.<p>
     * 
     * @param oldAlbumReleaseDate the albumReleaseDate property value to be removed.
     */
    void removeAlbumReleaseDate(Object oldAlbumReleaseDate);



    /* ***************************************************
     * Property http://www.example.com/ontology#albumTitle
     */
     
    /**
     * Gets all property values for the albumTitle property.<p>
     * 
     * @returns a collection of values for the albumTitle property.
     */
    Collection<? extends String> getAlbumTitle();

    /**
     * Checks if the class has a albumTitle property value.<p>
     * 
     * @return true if there is a albumTitle property value.
     */
    boolean hasAlbumTitle();

    /**
     * Adds a albumTitle property value.<p>
     * 
     * @param newAlbumTitle the albumTitle property value to be added
     */
    void addAlbumTitle(String newAlbumTitle);

    /**
     * Removes a albumTitle property value.<p>
     * 
     * @param oldAlbumTitle the albumTitle property value to be removed.
     */
    void removeAlbumTitle(String oldAlbumTitle);



    /* ***************************************************
     * Property http://www.example.com/ontology#trackCount
     */
     
    /**
     * Gets all property values for the trackCount property.<p>
     * 
     * @returns a collection of values for the trackCount property.
     */
    Collection<? extends Integer> getTrackCount();

    /**
     * Checks if the class has a trackCount property value.<p>
     * 
     * @return true if there is a trackCount property value.
     */
    boolean hasTrackCount();

    /**
     * Adds a trackCount property value.<p>
     * 
     * @param newTrackCount the trackCount property value to be added
     */
    void addTrackCount(Integer newTrackCount);

    /**
     * Removes a trackCount property value.<p>
     * 
     * @param oldTrackCount the trackCount property value to be removed.
     */
    void removeTrackCount(Integer oldTrackCount);



    /* ***************************************************
     * Common interfaces
     */

    OWLNamedIndividual getOwlIndividual();

    OWLOntology getOwlOntology();

    void delete();

}
